{"author":"shiwg","version":"1.2.4","userSecure":"","currTypeMapperGroupName":"Default","currTemplateGroupName":"ocean","currColumnConfigGroupName":"Default","currGlobalConfigGroupName":"Default","typeMapper":{"Default":{"name":"Default","elementList":[{"matchType":"REGEX","columnType":"varchar(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"char(\\(\\d+\\))?","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"(tiny|medium|long)*text","javaType":"java.lang.String"},{"matchType":"REGEX","columnType":"decimal(\\(\\d+,\\d+\\))?","javaType":"java.math.BigDecimal"},{"matchType":"ORDINARY","columnType":"integer","javaType":"java.lang.Integer"},{"matchType":"REGEX","columnType":"(tiny|small|medium)*int(\\(\\d+\\))?","javaType":"java.lang.Integer"},{"matchType":"ORDINARY","columnType":"int4","javaType":"java.lang.Integer"},{"matchType":"ORDINARY","columnType":"int8","javaType":"java.lang.Long"},{"matchType":"REGEX","columnType":"bigint(\\(\\d+\\))?","javaType":"java.lang.Long"},{"matchType":"ORDINARY","columnType":"date","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"datetime","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"timestamp","javaType":"java.util.Date"},{"matchType":"ORDINARY","columnType":"time","javaType":"java.time.LocalTime"},{"matchType":"ORDINARY","columnType":"boolean","javaType":"java.lang.Boolean"}]}},"template":{"ocean":{"name":"ocean","elementList":[{"name":"controller.java.vm","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath(\n$tool.append(\n\t$tableInfo.savePath, $tool.append($tool.append(\"/\", $tableInfo.saveModelName), \"-service/src/main/java/com/lkyl/common\"), \"/service/controller\")\n)\n\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.controller;\n\nimport $!{tableInfo.savePackageName}.ps.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.api.request.$!{tableInfo.name}DTO;\nimport $!{tableInfo.savePackageName}.ps.service.$!{tableInfo.name}Service;\nimport com.lkyl.oceanframework.web.config.CommonResult;\nimport com.lkyl.oceanframework.web.config.PaginatedResult;\nimport com.lkyl.oceanframework.web.common.CommonCode;\nimport com.lkyl.oceanframework.web.exception.CommonException;\nimport com.lkyl.oceanframework.web.constant.PageConstant;\nimport com.lkyl.oceanframework.web.util.PageUtil;\nimport org.springframework.beans.BeanUtils;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\nimport lombok.extern.slf4j.Slf4j;\n\nimport org.springframework.http.*;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.*;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Slf4j\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\t\n\t    /**\n     * 根据主键ID查询\n     *\n     * @param id \n     * @return 查询结果\n     */\n\t    @GetMapping(\"/getById/{id}\")\n    public ResponseEntity<?> getById(@PathVariable(\"id\") $!pk.shortType id) {\n        log.info(\"get SysParam info from token start...\");\n        Optional<$!{tableInfo.name}> $!tool.firstLowerCase($tableInfo.name) = this.$!{serviceName}.get(id);\n\t\n        if(null == $!tool.firstLowerCase($tableInfo.name)){\n            throw new CommonException(CommonCode.EXCEPTION, \"返回对象为NULL!\");\n        }\n        return ResponseEntity.ok(new CommonResult().\n        setCode(CommonCode.SUCCESS).\n        setMsg(\"获取成功\").\n        setData($!tool.firstLowerCase($tableInfo.name)));\n    }\n\n\t\n\t    /**\n     * 分页查询\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)}DTO 筛选条件\n     * @return 查询结果\n     */\n\t@PostMapping(\"/search\")\n    public ResponseEntity<?> search(@RequestParam(value = \"page\", required = false, defaultValue = \"1\") String pageString,\n                            @RequestParam(value = \"per_page\", required = false, defaultValue = \"10\") String perPageString,\n                            @RequestBody(required = false) $!{tableInfo.name}DTO $!tool.firstLowerCase($tableInfo.name)DTO) {\n        if(log.isInfoEnabled()) {\n            log.info(\"search $!{tableInfo.name} start...\");\n        }\n\n        int page = PageUtil.parsePage(pageString, PageConstant.PAGE);\n        int perPage = PageUtil.parsePerPage(perPageString, PageConstant.PER_PAGE);\n        PageHelper.startPage(page, perPage);\n\t\t//PageHelper.startPage(page, perPage, \"update_time desc\");\n\t\t$!{tableInfo.name} queryEntity = new $!{tableInfo.name}();\n        BeanUtils.copyProperties($!tool.firstLowerCase($tableInfo.name)DTO, queryEntity);\n        List<$!{tableInfo.name}> $!tool.firstLowerCase($tableInfo.name)List = this.$!{serviceName}.list(queryEntity);\n        PageInfo<$!{tableInfo.name}> pageInfo = new PageInfo<>($!tool.firstLowerCase($tableInfo.name)List);\n        return ResponseEntity.ok(new PaginatedResult()\n                .setCode(CommonCode.SUCCESS)\n                .setMsg(\"查询成功\")\n                .setData(pageInfo.getList())\n                .setCurrentPage(pageInfo.getPageNum())\n                .setTotalPage(pageInfo.getPages())\n                .setTotalCount(pageInfo.getTotal()));\n\n    }\n\t\n\t\n\t    /**\n     * 新增\n     * @param $!tool.firstLowerCase($tableInfo.name)DTO\n     * @return\n     */\n    @RequestMapping(value = \"/save\", method = RequestMethod.POST)\n    public ResponseEntity<?> save(@RequestBody $!{tableInfo.name}DTO $!tool.firstLowerCase($tableInfo.name)DTO) {\n        if(log.isInfoEnabled()) {\n            log.info(\"save $!{tableInfo.name} start...\");\n        }\n\t\t$!{tableInfo.name} saveEntity = new $!{tableInfo.name}();\n        BeanUtils.copyProperties($!tool.firstLowerCase($tableInfo.name)DTO, saveEntity);\n\t\tsaveEntity.setCreateTime(new Date());\n\t\tsaveEntity.setUpdateTime(new Date());\n        if (this.$!{serviceName}.save(saveEntity) != 1) {\n            throw new CommonException(CommonCode.EXCEPTION, \"新增失败!\");\n        }\n        return ResponseEntity.ok(new CommonResult()\n                .setCode(CommonCode.SUCCESS)\n                .setMsg(\"新增成功\")\n                .setData(saveEntity));\n    }\n\t\n\t    /**\n     * 修改\n     * @param $!tool.firstLowerCase($tableInfo.name)DTO\n     * @return\n     */\n    @PostMapping(\"/update\")\n    public ResponseEntity<?> update(@RequestBody $!{tableInfo.name}DTO $!tool.firstLowerCase($tableInfo.name)DTO) {\n        if(log.isInfoEnabled()) {\n            log.info(\"update $!{tableInfo.name} start....\");\n        }\n\t\t$!{tableInfo.name} updateEntity = new $!{tableInfo.name}();\n        BeanUtils.copyProperties($!tool.firstLowerCase($tableInfo.name)DTO, updateEntity);\n\t\tupdateEntity.setUpdateTime(new Date());\n        if(this.$!{serviceName}.updateById(updateEntity) != 1) {\n            throw new CommonException(CommonCode.EXCEPTION, \"更新失败!\");\n        }\n        return ResponseEntity.ok(new CommonResult()\n                .setCode(CommonCode.SUCCESS)\n                .setMsg(\"更新成功\")\n                .setData(updateEntity));\n    }\n\t\n\t /**\n     * 根据ID删除\n     *\n     * @param id\n     * @return\n     */\n    @DeleteMapping(\"/remove/{id}\")\n    public ResponseEntity<?> remove(@PathVariable(\"id\") $!pk.shortType id) {\n        if(log.isInfoEnabled()) {\n            log.info(\"remove $!{tableInfo.name} by id start...\");\n        }\n        if (this.$!{serviceName}.remove(id) != 1) {\n            throw new CommonException(CommonCode.EXCEPTION, \"删除失败!\");\n        }\n        return ResponseEntity.ok(new CommonResult()\n        .setCode(CommonCode.SUCCESS)\n        .setMsg(\"删除成功\"));\n    }\n\n\t\n}\n"},{"name":"dao.java.vm","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Dao\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath(\n$tool.append(\n\t$tableInfo.savePath, $tool.append($tool.append(\"/\", $tableInfo.saveModelName), \"-persistence/src/main/java/com/lkyl/common\"), \"/ps/dao\")\n)\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}ps.dao;\n\nimport $!{tableInfo.savePackageName}.ps.entity.$!{tableInfo.name};\nimport com.lkyl.oceanframework.mybatis.base.BaseDao;\nimport org.apache.ibatis.annotations.Mapper;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n @Mapper\npublic interface $!{tableName} extends BaseDao<$tableInfo.name, $!pk.shortType>{\n\n}\n"},{"name":"entity.java.vm","code":"##引入宏定义\n\n##使用宏定义设置回调（保存位置与文件后缀）\n##save(\"/ps/entity\", \".java\")\n\n$!callback.setFileName($tool.append($tableInfo.name, \".java\"))\n$!callback.setSavePath(\n$tool.append(\n\t$tableInfo.savePath, $tool.append($tool.append(\"/\", $tableInfo.saveModelName), \"-persistence/src/main/java/com/lkyl/common\"), \"/ps/entity\")\n)\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}ps.entity;\n\nimport java.io.Serializable;\nimport com.lkyl.oceanframework.mybatis.base.BaseDomain;\nimport lombok.Data;\nimport lombok.ToString;\nimport java.util.Date;\n\n##使用宏定义实现类注释信息\n@Data\n@ToString\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n##foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n##getSetMethod($column)\n##end\n\n}\n"},{"name":"mapper.xml.vm","code":"##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \".xml\"))\n##$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n$!callback.setSavePath(\n$tool.append(\n\t$tableInfo.savePath, $tool.append($tool.append(\"/\", $tableInfo.saveModelName), \"-persistence/src/main/resources\"), \"/mapper\")\n)\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.ps.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"get\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{id}\n    </select>\n\n    <!--查询指定行数据-->\n    <select id=\"getByParam\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\t\n\t    <!--查询列表据-->\n    <select id=\"list\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n    <!--统计总行数-->\n    <select id=\"count\" resultType=\"int\">\n        select count(1)\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"save\" >\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.fullColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.fullColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"batchSave\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.fullColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.fullColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"saveOrUpdateBatch\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.fullColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.fullColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.fullColumn)$!column.obj.name = values($!column.obj.name)#if($velocityHasNext),\n        #end#end\n\n    </insert>\n\n    <!--通过主键修改数据-->\n    <update id=\"updateById\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n    \n    <!--通过主键修改数据-->\n    <update id=\"updateOnWhere\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n                <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </update>\n\n    <!--通过主键删除-->\n    <delete id=\"remove\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n\t\n\t<!--通过where删除-->\n    <delete id=\"removeOnWhere\">\n        delete from $!{tableInfo.obj.name} \n\t\t                <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </delete>\n\t<!-- 通过ID批量删除 -->\n\t    <delete id=\"batchRemoveById\">\n        DELETE FROM $!{tableInfo.obj.name} \n        where $!pk.obj.name in\n\t\t        <foreach item=\"id\" collection=\"array\" open=\"(\" separator=\",\" close=\")\">\n#{id}        </foreach>\n    </delete>\n\n</mapper>\n"},{"name":"service.java.vm","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath(\n$tool.append(\n\t$tableInfo.savePath, $tool.append($tool.append(\"/\", $tableInfo.saveModelName), \"-persistence/src/main/java/com/lkyl/common\"), \"/ps/service\")\n)\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}ps.service;\n\nimport $!{tableInfo.savePackageName}.ps.entity.$!{tableInfo.name};\nimport com.lkyl.oceanframework.mybatis.base.BaseService;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} extends BaseService<$tableInfo.name, $!pk.shortType>{\n\n\n}"},{"name":"serviceImpl.java.vm","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath(\n$tool.append(\n\t$tableInfo.savePath, $tool.append($tool.append(\"/\", $tableInfo.saveModelName), \"-persistence/src/main/java/com/lkyl/common\"), \"/ps/service/impl\")\n)\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}ps.service.impl;\n\nimport com.lkyl.oceanframework.mybatis.base.BaseServiceImpl;\nimport $!{tableInfo.savePackageName}.ps.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.ps.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.ps.dao.$!{tableInfo.name}Dao;\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Service;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\npublic class $!{tableName} extends BaseServiceImpl<$!{tableInfo.name}, $!pk.shortType> implements $!{tableInfo.name}Service {\n    @Resource\n    private $!{tableInfo.name}Dao $!tool.firstLowerCase($tableInfo.name)Dao;\n\n    @Resource\n    public void set$!{tableInfo.name}Dao($!{tableInfo.name}Dao $!tool.firstLowerCase($tableInfo.name)Dao) {\n        this.$!tool.firstLowerCase($tableInfo.name)Dao = $!tool.firstLowerCase($tableInfo.name)Dao;\n        super.setBaseDao($!tool.firstLowerCase($tableInfo.name)Dao);\n    }\n}"},{"name":"mapper_ext.xml.vm","code":"##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"_ext.xml\"))\n$!callback.setSavePath(\n$tool.append(\n\t$tableInfo.savePath, $tool.append($tool.append(\"/\", $tableInfo.saveModelName), \"-persistence/src/main/resources\"), \"/mapper\")\n)\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n</mapper>\n"},{"name":"DTO.java.vm","code":"##引入宏定义\n\n##使用宏定义设置回调（保存位置与文件后缀）\n##save(\"/ps/entity\", \".java\")\n\n$!callback.setFileName($tool.append($tableInfo.name, \"DTO.java\"))\n$!callback.setSavePath(\n$tool.append(\n\t$tableInfo.savePath, $tool.append($tool.append(\"/\", $tableInfo.saveModelName), \"-api/src/main/java/com/lkyl/common\"), \"/api/request\")\n)\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}api.request;\n\nimport java.io.Serializable;\nimport lombok.Data;\nimport lombok.ToString;\nimport java.util.Date;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n##使用宏定义实现类注释信息\n@Data\n@ApiModel(\"$!{tableInfo.comment}请求体\")\n@ToString\npublic class $!{tableInfo.name}DTO implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})\n    @ApiModelProperty(\"${column.comment}\")\n    #end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n##foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n##getSetMethod($column)\n##end\n\n}\n"},{"name":"VO.java.vm","code":"##引入宏定义\n\n##使用宏定义设置回调（保存位置与文件后缀）\n##save(\"/ps/entity\", \".java\")\n\n$!callback.setFileName($tool.append($tableInfo.name, \"VO.java\"))\n$!callback.setSavePath(\n$tool.append(\n\t$tableInfo.savePath, $tool.append($tool.append(\"/\", $tableInfo.saveModelName), \"-api/src/main/java/com/lkyl/common\"), \"/api/response\")\n)\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}api.response;\n\nimport java.io.Serializable;\nimport lombok.Data;\nimport lombok.ToString;\nimport java.util.Date;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n##使用宏定义实现类注释信息\n@Data\n@ApiModel(\"$!{tableInfo.comment}响应体\")\n@ToString\npublic class $!{tableInfo.name}VO implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})\n     @ApiModelProperty(\"${column.comment}\")\n     #end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n##foreach($column in $tableInfo.fullColumn)\n##使用宏定义实现get,set方法\n##getSetMethod($column)\n##end\n\n}\n"}]}},"columnConfig":{"Default":{"name":"Default","elementList":[{"title":"disable","type":"BOOLEAN","selectValue":""},{"title":"support","type":"SELECT","selectValue":"add,edit,query,del,ui"}]}},"globalConfig":{"Default":{"name":"Default","elementList":[{"name":"autoImport.vm","value":"##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"},{"name":"define.vm","value":"##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"},{"name":"init.vm","value":"##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"},{"name":"mybatisSupport.vm","value":"##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"}]}}}